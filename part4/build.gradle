/*
 * Copyright (c) 2007-2015 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'provided-base'

archivesBaseName = 'impatient'

buildscript {
  repositories {
    jcenter()
    maven { url 'http://repo.spring.io/plugins-release' }
  }
  dependencies {
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.1'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'http://conjars.org/repo/' }
}

ext.cascadingVersion = '3.0.0'
ext.hadoopVersion = '2.6.0'

dependencies {
  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion )

  provided( group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion )
  provided( group: 'org.apache.hadoop', name: 'hadoop-client', version: hadoopVersion )
  provided( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoopVersion )
}

jar {
  description = "Assembles a Hadoop ready jar file"
  doFirst {
    into( 'lib' ) {
      from { configurations.compile.minus( [configurations.provided] ) }
    }
  }
  manifest {
    attributes( "Main-Class": "impatient/Main" )
  }
}

task distCopy( type: Copy, dependsOn: jar ) {
  into "${buildDir}/dist/${archivesBaseName}"

  from 'README.md'
  from 'build.gradle'
  from( 'src' ) { into 'src' }
  from( 'data' ) { into 'data' }

  from "$buildDir/libs"
}

task dist( type: Tar, dependsOn: distCopy ) {
  compression = "GZIP"
  classifier = new SimpleDateFormat( "yyyyMMdd" ).format( new Date() )

  from "${buildDir}/dist/"
}
